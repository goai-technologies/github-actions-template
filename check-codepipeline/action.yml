name: "Check CodePipeline Status"
description: "Checks AWS CodePipeline status and fails if not successful"
author: "Your Name or Org"

inputs:
  aws-region:
    required: true
    description: "AWS region"
  aws-role-to-assume:
    required: true
    description: "AWS Role ARN to assume"
  codepipeline-name:
    required: true
    description: "CodePipeline name to check"
  max-retries:
    required: false
    default: 120
    description: "Maximum number of polling attempts"
  poll-interval:
    required: false
    default: 10
    description: "Seconds to wait between polls"

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        aws-region: ${{ inputs.aws-region }}

    - name: Check CodePipeline Status
      shell: bash
      run: |
        PIPELINE="${{ inputs.codepipeline-name }}"
        MAX_RETRIES=${{ inputs.max-retries }}
        POLL_INTERVAL=${{ inputs.poll-interval }}

        # Get the latest execution ID
        EXECUTION_ID=$(aws codepipeline list-pipeline-executions \
                        --pipeline-name "$PIPELINE" \
                        --max-items 1 \
                        --query "pipelineExecutionSummaries[0].pipelineExecutionId" \
                        --output text)

        if [ "$EXECUTION_ID" == "None" ]; then
          echo "⚠️ No pipeline executions found"
          exit 1
        fi

        echo "Waiting for CodePipeline '$PIPELINE' execution $EXECUTION_ID to complete..."

        for i in $(seq 1 $MAX_RETRIES); do
          STATUS=$(aws codepipeline get-pipeline-execution \
             --pipeline-name "$PIPELINE" \
             --pipeline-execution-id "$EXECUTION_ID" \
             --query "pipelineExecution.status" \
             --output text)

          echo "Attempt $i: Status = $STATUS"

          if [[ "$STATUS" == "Succeeded" ]]; then
            echo "✅ CodePipeline succeeded!"
            exit 0
          elif [[ "$STATUS" == "Failed" ]] || [[ "$STATUS" == "Stopped" ]]; then
            echo "❌ CodePipeline failed!"
            exit 1
          else
            echo "⏳ Pipeline in progress. Waiting $POLL_INTERVAL seconds..."
            sleep $POLL_INTERVAL
          fi
        done

        echo "❌ Timeout waiting for CodePipeline"
        exit 1